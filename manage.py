import argparse
import json
import typing

from api import create_app
from database.connection import get_session
from database.models import Actor, ActorMovie, Genre, GenreMovie, Movie


def _purge():
    """
    Removing all data from the database.
    """
    with get_session() as session:
        session.begin()
        session.query(ActorMovie).delete()
        session.query(Actor).delete()
        session.query(GenreMovie).delete()
        session.query(Genre).delete()
        session.query(Movie).delete()
        session.commit()


def purge(_):
    _purge()


def _reload(file: typing.TextIO):
    """
    Removing all data from the database
    and uploading movies data from the file to it.
    """
    # Removing all data
    _purge()

    raw_movies = json.loads(file.read())

    # Collecting the data from the file.
    # Object ids are set here instead of
    # using autogenerated database values
    # as it allows to create relations between
    # objects before their insert.
    # The database is empty so it doesn't make collisions.
    actors = {}
    genres = {}
    actor_movies = []
    genre_movies = []
    movies = []

    for raw_movie in raw_movies:

        movie = Movie()
        movie.id = len(movies) + 1
        movie.title = raw_movie["title"]
        movie.year = raw_movie["year"]
        movies.append(movie)

        for actor_name in raw_movie["cast"]:

            actor = actors.get(actor_name)
            if actor is None:
                actor = Actor()
                actor.id = len(actors) + 1
                actor.name = actor_name
                actors[actor_name] = actor

            actor_movie = ActorMovie()
            actor_movie.actor_id = actor.id
            actor_movie.movie_id = movie.id
            actor_movies.append(actor_movie)

        for genre_name in raw_movie["genres"]:

            genre = genres.get(genre_name)
            if genre is None:
                genre = Genre()
                genre.id = len(genres) + 1
                genre.name = genre_name
                genres[genre_name] = genre

            genre_movie = GenreMovie()
            genre_movie.genre_id = genre.id
            genre_movie.movie_id = movie.id
            genre_movies.append(genre_movie)

    # Saving collected objects to the database
    with get_session() as session:

        session.begin()
        session.bulk_save_objects(actors.values())
        session.bulk_save_objects(genres.values())
        session.bulk_save_objects(movies)
        session.bulk_save_objects(actor_movies)
        session.bulk_save_objects(genre_movies)
        session.commit()


def reload(args: argparse.Namespace):
    _reload(args.file)


def run(_):
    """
    Running the main application.
    """
    app = create_app()
    app.run()


def main():
    """
    Parsing the script options.
    """
    parser = argparse.ArgumentParser(description="Scripts for managing the application")
    subparsers = parser.add_subparsers()

    purge_parser = subparsers.add_parser("purge", help="Remove all data from the database")
    purge_parser.set_defaults(func=purge)

    reload_parser = subparsers.add_parser(
        "reload",
        help="Remove all data and upload selected file to the database",
    )
    reload_parser.add_argument("file", type=argparse.FileType())
    reload_parser.set_defaults(func=reload)

    run_parser = subparsers.add_parser("run", help="Run the application")
    run_parser.set_defaults(func=run)

    args = parser.parse_args()
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
